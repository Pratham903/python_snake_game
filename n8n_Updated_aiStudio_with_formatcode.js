const body = items[0].json?.body;
let htmlContent = "";

if (body?.summarize_data?.repository_data) {
  const summaryData = body.summarize_data;
  const repoData = summaryData.repository_data;
  const repoSummary = summaryData.repository_summary; // Raw text
  const commitSummary = summaryData.commit_summary; // Raw text

  const repoName = repoData.name || "Unknown Repository";

  const formatContributors = (contributors) => {
    if (!contributors || contributors.length === 0)
      return "<li>No contributor data available.</li>";
    return contributors
      .map(
        (c) =>
          `<li><strong>${
            c.username
          }</strong> (${c.contributions.toLocaleString()} contributions)</li>`
      )
      .join("");
  };

  const formatLanguages = (languages) => {
    if (!languages || Object.keys(languages).length === 0)
      return "<li>No language data available.</li>";
    return Object.keys(languages)
      .map((lang) => `<li>${lang}</li>`)
      .join("");
  };

  
  const formatSummaryToHtml = (summaryText, defaultMessage) => {
    if (!summaryText || summaryText.trim() === "") {
      return `<p><em>${defaultMessage}</em></p>`;
    }

    // 1. Replace **text** with <strong>text</strong>
    let html = summaryText.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");

    const lines = html.split("\n");
    const resultHtml = [];
    let inList = false;

    for (const line of lines) {
      const trimmedLine = line.trim();

      // 2. Check for list items
      if (trimmedLine.startsWith("- ")) {
        if (!inList) {
          resultHtml.push('<ul style="padding-left: 20px;">');
          inList = true;
        }
        resultHtml.push(`<li>${trimmedLine.substring(2)}</li>`);
      } else {
        if (inList) {
          resultHtml.push("</ul>"); // Close the list
          inList = false;
        }
        if (trimmedLine) {
          // 3. Wrap other content in <p> tags
          resultHtml.push(`<p>${trimmedLine}</p>`);
        }
      }
    }

    if (inList) {
      resultHtml.push("</ul>"); // Ensure final list is closed
    }

    return resultHtml.join("");
  };

  let formattedPushDate = "N/A";
  if (repoData.last_push) {
    formattedPushDate = new Date(repoData.last_push).toUTCString();
  }

  htmlContent = `
    <h2>Summary for: ${repoName}</h2>
    <hr>
    
    <h3>Repository Details</h3>
    <p><strong>Full Name:</strong> ${repoData.full_name ?? "N/A"}</p>
    <p><strong>Primary Language:</strong> ${repoData.language ?? "N/A"}</p>
    <p><strong>Last Push:</strong> ${formattedPushDate}</p>
    <p><strong>Description:</strong> ${
      repoData.description ?? "No description provided."
    }</p>
    
    <h3>Top Contributors</h3>
    <ol style="padding-left: 20px;">${formatContributors(
      repoData.contributors
    )}</ol>
    
    <h3>Languages Used</h3>
    <ul style="padding-left: 20px;">${formatLanguages(
      repoData.languages_breakdown
    )}</ul>

    <h3>Operational Summary</h3>
    <div class="summary-container" style="background-color: #f7f7f9; border: 1px solid #e1e1e8; padding: 15px; border-radius: 5px;">
      ${formatSummaryToHtml(repoSummary, "No operational summary available.")}
    </div>
    
    <h3>Team Progress & Development Rhythm</h3>
    <div class="summary-container" style="background-color: #f7f7f9; border: 1px solid #e1e1e8; padding: 15px; border-radius: 5px;">
      ${formatSummaryToHtml(commitSummary, "No commit summary available.")}
    </div>
    
    </br></br></br>
    <p><strong><i></i>This is automatically generated by <u>BAS Services.</u></strong></p>
  `;
} else if (body?.repository_summary && body?.commit_summary) {
  const repoSummary = body.repository_summary;
  const commitSummary = body.commit_summary;

  let repoName = "Repository";
  const nameMatch = repoSummary.match(/for (.*?) Software Repository/);
  if (nameMatch && nameMatch[1]) {
    repoName = nameMatch[1];
  }

  htmlContent = `
    <h2>${repoName} Repository Analysis</h2>
    <hr>
    <h3>Repository Summary</h3>
    <pre style="white-space: pre-wrap; word-wrap: break-word; font-family: monospace; background-color: #f4f4f4; padding: 15px; border-radius: 5px;">${repoSummary}</pre>
    
    <h3>Team Progress & Development Rhythm</h3>
    <pre style="white-space: pre-wrap; word-wrap: break-word; font-family: monospace; background-color: #f4f4f4; padding: 15px; border-radius: 5px;">${commitSummary}</pre>
    
    </br></br></br>
    <p><strong><i></i>This is automatically generated by <u>BAS Services.</u></strong></p>
  `;
} else {
  const payload = body?.payload;
  const aiSummary = body?.summarize_data?.summary || "No AI summary available";

  if (payload?.head_commit) {
    const commit = payload.head_commit;
    const author = commit?.author ?? {
      name: "N/A",
      email: "N/A",
      username: "N/A",
    };
    let formattedTime = "N/A";
    if (commit?.timestamp) {
      const date = new Date(commit.timestamp);
      formattedTime = `${date.toLocaleDateString("en-IN", {
        day: "numeric",
        month: "long",
        year: "numeric",
      })} at ${date.toLocaleTimeString("en-IN", {
        timeZone: "Asia/Kolkata",
      })} IST`;
    }
    const modifiedFiles = commit?.modified || [];
    htmlContent = `
      <p><strong>Author Name:</strong> ${author.name}</p>
      <p><strong>Email ID:</strong> ${author.email}</p>
      <p><strong>Commit ID:</strong> ${commit?.id ?? "N/A"}</p>
      <p><strong>Message:</strong> ${commit?.message ?? "No message"}</p>
      <p><strong>Timestamp:</strong> ${formattedTime}</p>
      <p><strong>Files Modified:</strong> ${
        modifiedFiles.join(", ") || "None"
      }</p>
      <p><strong>AI Summary:</strong> ${aiSummary}</p></br></br></br>
      <p><strong><i></i>This is automatically generated by <u>BAS Services.</u></strong></p>
    `;
  } else if (payload?.pull_request) {
    const pr = payload.pull_request;
    const user = pr.user;
    htmlContent = `
      <p><strong>Pull Request Title:</strong> ${pr.title}</p>
      <p><strong>PR Body:</strong> ${pr.body || "No description provided"}</p>
      <p><strong>Author:</strong> ${user.login}</p>
      <p><strong>URL:</strong> <a href="${pr.html_url}">${pr.html_url}</a></p>
      <p><strong>Changed Files:</strong> ${pr.changed_files ?? "N/A"}</p>
      <p><strong>Additions:</strong> ${pr.additions ?? "N/A"}</p>
      <p><strong>Deletions:</strong> ${pr.deletions ?? "N/A"}</p>
      <p><strong>AI Summary:</strong> ${(aiSummary)}</p></br></br></br>
      <p><strong><i></i>This is automatically generated by <u>BAS Services.</u></strong></p>
    `;
  } else if (payload?.issue) {
    const issue = payload.issue;
    const user = issue.user;
    htmlContent = `
      <p><strong>Issue Title:</strong> ${issue.title}</p>
      <p><strong>Issue Body:</strong> ${
        issue.body || "No description provided"
      }</p>
      <p><strong>Author:</strong> ${user.login}</p>
      <p><strong>URL:</strong> <a href="${issue.html_url}">${
      issue.html_url
    }</a></p>
      <p><strong>AI Summary:</strong> ${aiSummary}</p></br></br></br>
      <p><strong><i></i>This is automatically generated by <u>BAS Services.</u></strong></p>
    `;
  } else {
    htmlContent = `<p>Received data, but it is not a recognized event type (Push, PR, Issue, or Summary Report).</p>
    </br></br></br>
    <p><strong><i></i>This is automatically generated by <u>BAS Services.</u></strong></p>`;
  }
}

return [
  {
    json: {
      htmlBody: htmlContent,
    },
  },
];
